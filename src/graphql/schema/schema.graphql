### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  accessToken: String
  accessTokenExpires: DateTime
  compoundId: String!
  createdAt: DateTime!
  id: Int!
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime!
  userId: Int!
}

input AccountCreateInput {
  accessToken: String
  accessTokenExpires: DateTime
  compoundId: String!
  createdAt: DateTime
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTime
  userId: Int!
}

input AccountOrderByInput {
  accessToken: SortOrder
  accessTokenExpires: SortOrder
  compoundId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountUpdateInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  compoundId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input AccountUpdateManyMutationInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  compoundId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input AccountWhereInput {
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  AND: [AccountWhereInput!]
  compoundId: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input AccountWhereUniqueInput {
  compoundId: String
  id: Int
}

type AffectedRowsOutput {
  count: Int!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Character {
  age: Int
  bloodType: String
  createdAt: DateTime!
  description: String
  eyes: String
  height: String
  id: Int!
  name: String
  published: Boolean!
  story: Story!
  storyId: Int!
  updatedAt: DateTime!
  weight: String
}

input CharacterCreateInput {
  age: Int
  bloodType: String
  createdAt: DateTime
  description: String
  eyes: String
  height: String
  name: String
  published: Boolean
  story: StoryCreateNestedOneWithoutCharactersInput!
  updatedAt: DateTime
  weight: String
}

input CharacterCreateNestedManyWithoutStoryInput {
  connect: [CharacterWhereUniqueInput!]
  connectOrCreate: [CharacterCreateOrConnectWithoutStoryInput!]
  create: [CharacterCreateWithoutStoryInput!]
}

input CharacterCreateOrConnectWithoutStoryInput {
  create: CharacterCreateWithoutStoryInput!
  where: CharacterWhereUniqueInput!
}

input CharacterCreateWithoutStoryInput {
  age: Int
  bloodType: String
  createdAt: DateTime
  description: String
  eyes: String
  height: String
  name: String
  published: Boolean
  updatedAt: DateTime
  weight: String
}

input CharacterListRelationFilter {
  every: CharacterWhereInput
  none: CharacterWhereInput
  some: CharacterWhereInput
}

input CharacterOrderByInput {
  age: SortOrder
  bloodType: SortOrder
  createdAt: SortOrder
  description: SortOrder
  eyes: SortOrder
  height: SortOrder
  id: SortOrder
  name: SortOrder
  published: SortOrder
  story: StoryOrderByInput
  storyId: SortOrder
  updatedAt: SortOrder
  weight: SortOrder
}

input CharacterScalarWhereInput {
  age: IntNullableFilter
  AND: [CharacterScalarWhereInput!]
  bloodType: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  eyes: StringNullableFilter
  height: StringNullableFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [CharacterScalarWhereInput!]
  OR: [CharacterScalarWhereInput!]
  published: BoolFilter
  storyId: IntFilter
  updatedAt: DateTimeFilter
  weight: StringNullableFilter
}

input CharacterUpdateInput {
  age: NullableIntFieldUpdateOperationsInput
  bloodType: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  eyes: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  story: StoryUpdateOneRequiredWithoutCharactersInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: NullableStringFieldUpdateOperationsInput
}

input CharacterUpdateManyMutationInput {
  age: NullableIntFieldUpdateOperationsInput
  bloodType: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  eyes: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: NullableStringFieldUpdateOperationsInput
}

input CharacterUpdateManyWithoutStoryInput {
  connect: [CharacterWhereUniqueInput!]
  connectOrCreate: [CharacterCreateOrConnectWithoutStoryInput!]
  create: [CharacterCreateWithoutStoryInput!]
  delete: [CharacterWhereUniqueInput!]
  deleteMany: [CharacterScalarWhereInput!]
  disconnect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutStoryInput!]
  updateMany: [CharacterUpdateManyWithWhereWithoutStoryInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutStoryInput!]
}

input CharacterUpdateManyWithWhereWithoutStoryInput {
  data: CharacterUpdateManyMutationInput!
  where: CharacterScalarWhereInput!
}

input CharacterUpdateWithoutStoryInput {
  age: NullableIntFieldUpdateOperationsInput
  bloodType: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  eyes: NullableStringFieldUpdateOperationsInput
  height: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  weight: NullableStringFieldUpdateOperationsInput
}

input CharacterUpdateWithWhereUniqueWithoutStoryInput {
  data: CharacterUpdateWithoutStoryInput!
  where: CharacterWhereUniqueInput!
}

input CharacterUpsertWithWhereUniqueWithoutStoryInput {
  create: CharacterCreateWithoutStoryInput!
  update: CharacterUpdateWithoutStoryInput!
  where: CharacterWhereUniqueInput!
}

input CharacterWhereInput {
  age: IntNullableFilter
  AND: [CharacterWhereInput!]
  bloodType: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  eyes: StringNullableFilter
  height: StringNullableFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  published: BoolFilter
  story: StoryWhereInput
  storyId: IntFilter
  updatedAt: DateTimeFilter
  weight: StringNullableFilter
}

input CharacterWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

type Example {
  message: String
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneCharacter(data: CharacterCreateInput!): Character!
  createOneSeries(data: SeriesCreateInput!): Series!
  createOneSession(data: SessionCreateInput!): Session!
  createOneStory(data: StoryCreateInput!): Story!
  createOneUser(data: UserCreateInput!): User!
  createOneVerificationRequest(data: VerificationRequestCreateInput!): VerificationRequest!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyCharacter(where: CharacterWhereInput): AffectedRowsOutput!
  deleteManySeries(where: SeriesWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManyStory(where: StoryWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVerificationRequest(where: VerificationRequestWhereInput): AffectedRowsOutput!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOneCharacter(where: CharacterWhereUniqueInput!): Character
  deleteOneSeries(where: SeriesWhereUniqueInput!): Series
  deleteOneSession(where: SessionWhereUniqueInput!): Session
  deleteOneStory(where: StoryWhereUniqueInput!): Story
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVerificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyCharacter(data: CharacterUpdateManyMutationInput!, where: CharacterWhereInput): AffectedRowsOutput!
  updateManySeries(data: SeriesUpdateManyMutationInput!, where: SeriesWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManyStory(data: StoryUpdateManyMutationInput!, where: StoryWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVerificationRequest(data: VerificationRequestUpdateManyMutationInput!, where: VerificationRequestWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOneCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateOneSeries(data: SeriesUpdateInput!, where: SeriesWhereUniqueInput!): Series
  updateOneSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateOneStory(data: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneVerificationRequest(data: VerificationRequestUpdateInput!, where: VerificationRequestWhereUniqueInput!): VerificationRequest
  upsertOneAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneCharacter(create: CharacterCreateInput!, update: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character!
  upsertOneSeries(create: SeriesCreateInput!, update: SeriesUpdateInput!, where: SeriesWhereUniqueInput!): Series!
  upsertOneSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertOneStory(create: StoryCreateInput!, update: StoryUpdateInput!, where: StoryWhereUniqueInput!): Story!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneVerificationRequest(create: VerificationRequestCreateInput!, update: VerificationRequestUpdateInput!, where: VerificationRequestWhereUniqueInput!): VerificationRequest!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int, orderBy: [AccountOrderByInput!], where: AccountWhereInput): [Account!]!
  accountsCount(where: AccountWhereInput): Int
  character(where: CharacterWhereUniqueInput!): Character
  characters(after: CharacterWhereUniqueInput, before: CharacterWhereUniqueInput, first: Int, last: Int, orderBy: [CharacterOrderByInput!], where: CharacterWhereInput): [Character!]!
  charactersCount(where: CharacterWhereInput): Int
  example: Example
  findFirstAccount(cursor: AccountWhereUniqueInput, orderBy: AccountOrderByInput, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstCharacter(cursor: CharacterWhereUniqueInput, orderBy: CharacterOrderByInput, skip: Int, take: Int, where: CharacterWhereInput): Character
  findFirstSeries(cursor: SeriesWhereUniqueInput, orderBy: SeriesOrderByInput, skip: Int, take: Int, where: SeriesWhereInput): Series
  findFirstSession(cursor: SessionWhereUniqueInput, orderBy: SessionOrderByInput, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstStory(cursor: StoryWhereUniqueInput, orderBy: StoryOrderByInput, skip: Int, take: Int, where: StoryWhereInput): Story
  findFirstUser(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationRequest(cursor: VerificationRequestWhereUniqueInput, orderBy: VerificationRequestOrderByInput, skip: Int, take: Int, where: VerificationRequestWhereInput): VerificationRequest
  series(after: SeriesWhereUniqueInput, before: SeriesWhereUniqueInput, first: Int, last: Int, orderBy: [SeriesOrderByInput!], where: SeriesWhereInput): [Series!]!
  seriesCount(where: SeriesWhereInput): Int
  session(where: SessionWhereUniqueInput!): Session
  sessions(after: SessionWhereUniqueInput, before: SessionWhereUniqueInput, first: Int, last: Int, orderBy: [SessionOrderByInput!], where: SessionWhereInput): [Session!]!
  sessionsCount(where: SessionWhereInput): Int
  stories(after: StoryWhereUniqueInput, before: StoryWhereUniqueInput, first: Int, last: Int, orderBy: [StoryOrderByInput!], where: StoryWhereInput): [Story!]!
  storiesCount(where: StoryWhereInput): Int
  story(where: StoryWhereUniqueInput!): Story
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByInput!], where: UserWhereInput): [User!]!
  usersCount(where: UserWhereInput): Int
  verificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
  verificationRequests(after: VerificationRequestWhereUniqueInput, before: VerificationRequestWhereUniqueInput, first: Int, last: Int, orderBy: [VerificationRequestOrderByInput!], where: VerificationRequestWhereInput): [VerificationRequest!]!
  verificationRequestsCount(where: VerificationRequestWhereInput): Int
}

enum QueryMode {
  default
  insensitive
}

type Series {
  createdAt: DateTime!
  description: String
  id: Int!
  published: Boolean!
  stories(after: StoryWhereUniqueInput, before: StoryWhereUniqueInput, first: Int, last: Int): [Story!]!
  title: String!
  updatedAt: DateTime!
}

input SeriesCreateInput {
  createdAt: DateTime
  description: String
  published: Boolean
  stories: StoryCreateNestedManyWithoutSeriesInput
  title: String!
  updatedAt: DateTime
}

input SeriesCreateNestedOneWithoutStoriesInput {
  connect: SeriesWhereUniqueInput
  connectOrCreate: SeriesCreateOrConnectWithoutStoriesInput
  create: SeriesCreateWithoutStoriesInput
}

input SeriesCreateOrConnectWithoutStoriesInput {
  create: SeriesCreateWithoutStoriesInput!
  where: SeriesWhereUniqueInput!
}

input SeriesCreateWithoutStoriesInput {
  createdAt: DateTime
  description: String
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input SeriesOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  published: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input SeriesUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  stories: StoryUpdateManyWithoutSeriesInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SeriesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SeriesUpdateOneWithoutStoriesInput {
  connect: SeriesWhereUniqueInput
  connectOrCreate: SeriesCreateOrConnectWithoutStoriesInput
  create: SeriesCreateWithoutStoriesInput
  delete: Boolean
  disconnect: Boolean
  update: SeriesUpdateWithoutStoriesInput
  upsert: SeriesUpsertWithoutStoriesInput
}

input SeriesUpdateWithoutStoriesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SeriesUpsertWithoutStoriesInput {
  create: SeriesCreateWithoutStoriesInput!
  update: SeriesUpdateWithoutStoriesInput!
}

input SeriesWhereInput {
  AND: [SeriesWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  NOT: [SeriesWhereInput!]
  OR: [SeriesWhereInput!]
  published: BoolFilter
  stories: StoryListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input SeriesWhereUniqueInput {
  id: Int
}

type Session {
  accessToken: String!
  createdAt: DateTime!
  expires: DateTime!
  id: Int!
  sessionToken: String!
  updatedAt: DateTime!
  userId: Int!
}

input SessionCreateInput {
  accessToken: String!
  createdAt: DateTime
  expires: DateTime!
  sessionToken: String!
  updatedAt: DateTime
  userId: Int!
}

input SessionOrderByInput {
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionUpdateInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input SessionUpdateManyMutationInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input SessionWhereInput {
  accessToken: StringFilter
  AND: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: IntFilter
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input SessionWhereUniqueInput {
  accessToken: String
  id: Int
  sessionToken: String
}

enum SortOrder {
  asc
  desc
}

type Story {
  author: User!
  authorId: Int!
  characters(after: CharacterWhereUniqueInput, before: CharacterWhereUniqueInput, first: Int, last: Int): [Character!]!
  createdAt: DateTime!
  description: String
  id: Int!
  part: Int
  private: Boolean!
  published: Boolean!
  series: Series
  seriesId: Int
  subTitle: String
  thumbnail: String
  title: String!
  updatedAt: DateTime!
}

input StoryCreateInput {
  author: UserCreateNestedOneWithoutStoriesInput!
  characters: CharacterCreateNestedManyWithoutStoryInput
  createdAt: DateTime
  description: String
  part: Int
  private: Boolean
  published: Boolean
  series: SeriesCreateNestedOneWithoutStoriesInput
  subTitle: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input StoryCreateNestedManyWithoutAuthorInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutAuthorInput!]
  create: [StoryCreateWithoutAuthorInput!]
}

input StoryCreateNestedManyWithoutSeriesInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutSeriesInput!]
  create: [StoryCreateWithoutSeriesInput!]
}

input StoryCreateNestedOneWithoutCharactersInput {
  connect: StoryWhereUniqueInput
  connectOrCreate: StoryCreateOrConnectWithoutCharactersInput
  create: StoryCreateWithoutCharactersInput
}

input StoryCreateOrConnectWithoutAuthorInput {
  create: StoryCreateWithoutAuthorInput!
  where: StoryWhereUniqueInput!
}

input StoryCreateOrConnectWithoutCharactersInput {
  create: StoryCreateWithoutCharactersInput!
  where: StoryWhereUniqueInput!
}

input StoryCreateOrConnectWithoutSeriesInput {
  create: StoryCreateWithoutSeriesInput!
  where: StoryWhereUniqueInput!
}

input StoryCreateWithoutAuthorInput {
  characters: CharacterCreateNestedManyWithoutStoryInput
  createdAt: DateTime
  description: String
  part: Int
  private: Boolean
  published: Boolean
  series: SeriesCreateNestedOneWithoutStoriesInput
  subTitle: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input StoryCreateWithoutCharactersInput {
  author: UserCreateNestedOneWithoutStoriesInput!
  createdAt: DateTime
  description: String
  part: Int
  private: Boolean
  published: Boolean
  series: SeriesCreateNestedOneWithoutStoriesInput
  subTitle: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input StoryCreateWithoutSeriesInput {
  author: UserCreateNestedOneWithoutStoriesInput!
  characters: CharacterCreateNestedManyWithoutStoryInput
  createdAt: DateTime
  description: String
  part: Int
  private: Boolean
  published: Boolean
  subTitle: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input StoryListRelationFilter {
  every: StoryWhereInput
  none: StoryWhereInput
  some: StoryWhereInput
}

input StoryOrderByInput {
  author: UserOrderByInput
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  part: SortOrder
  private: SortOrder
  published: SortOrder
  series: SeriesOrderByInput
  seriesId: SortOrder
  subTitle: SortOrder
  thumbnail: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input StoryScalarWhereInput {
  AND: [StoryScalarWhereInput!]
  authorId: IntFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  NOT: [StoryScalarWhereInput!]
  OR: [StoryScalarWhereInput!]
  part: IntNullableFilter
  private: BoolFilter
  published: BoolFilter
  seriesId: IntNullableFilter
  subTitle: StringNullableFilter
  thumbnail: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input StoryUpdateInput {
  author: UserUpdateOneRequiredWithoutStoriesInput
  characters: CharacterUpdateManyWithoutStoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  part: NullableIntFieldUpdateOperationsInput
  private: BoolFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  series: SeriesUpdateOneWithoutStoriesInput
  subTitle: NullableStringFieldUpdateOperationsInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  part: NullableIntFieldUpdateOperationsInput
  private: BoolFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  subTitle: NullableStringFieldUpdateOperationsInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateManyWithoutAuthorInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutAuthorInput!]
  create: [StoryCreateWithoutAuthorInput!]
  delete: [StoryWhereUniqueInput!]
  deleteMany: [StoryScalarWhereInput!]
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutAuthorInput!]
}

input StoryUpdateManyWithoutSeriesInput {
  connect: [StoryWhereUniqueInput!]
  connectOrCreate: [StoryCreateOrConnectWithoutSeriesInput!]
  create: [StoryCreateWithoutSeriesInput!]
  delete: [StoryWhereUniqueInput!]
  deleteMany: [StoryScalarWhereInput!]
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  update: [StoryUpdateWithWhereUniqueWithoutSeriesInput!]
  updateMany: [StoryUpdateManyWithWhereWithoutSeriesInput!]
  upsert: [StoryUpsertWithWhereUniqueWithoutSeriesInput!]
}

input StoryUpdateManyWithWhereWithoutAuthorInput {
  data: StoryUpdateManyMutationInput!
  where: StoryScalarWhereInput!
}

input StoryUpdateManyWithWhereWithoutSeriesInput {
  data: StoryUpdateManyMutationInput!
  where: StoryScalarWhereInput!
}

input StoryUpdateOneRequiredWithoutCharactersInput {
  connect: StoryWhereUniqueInput
  connectOrCreate: StoryCreateOrConnectWithoutCharactersInput
  create: StoryCreateWithoutCharactersInput
  update: StoryUpdateWithoutCharactersInput
  upsert: StoryUpsertWithoutCharactersInput
}

input StoryUpdateWithoutAuthorInput {
  characters: CharacterUpdateManyWithoutStoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  part: NullableIntFieldUpdateOperationsInput
  private: BoolFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  series: SeriesUpdateOneWithoutStoriesInput
  subTitle: NullableStringFieldUpdateOperationsInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithoutCharactersInput {
  author: UserUpdateOneRequiredWithoutStoriesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  part: NullableIntFieldUpdateOperationsInput
  private: BoolFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  series: SeriesUpdateOneWithoutStoriesInput
  subTitle: NullableStringFieldUpdateOperationsInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithoutSeriesInput {
  author: UserUpdateOneRequiredWithoutStoriesInput
  characters: CharacterUpdateManyWithoutStoryInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  part: NullableIntFieldUpdateOperationsInput
  private: BoolFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  subTitle: NullableStringFieldUpdateOperationsInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input StoryUpdateWithWhereUniqueWithoutAuthorInput {
  data: StoryUpdateWithoutAuthorInput!
  where: StoryWhereUniqueInput!
}

input StoryUpdateWithWhereUniqueWithoutSeriesInput {
  data: StoryUpdateWithoutSeriesInput!
  where: StoryWhereUniqueInput!
}

input StoryUpsertWithoutCharactersInput {
  create: StoryCreateWithoutCharactersInput!
  update: StoryUpdateWithoutCharactersInput!
}

input StoryUpsertWithWhereUniqueWithoutAuthorInput {
  create: StoryCreateWithoutAuthorInput!
  update: StoryUpdateWithoutAuthorInput!
  where: StoryWhereUniqueInput!
}

input StoryUpsertWithWhereUniqueWithoutSeriesInput {
  create: StoryCreateWithoutSeriesInput!
  update: StoryUpdateWithoutSeriesInput!
  where: StoryWhereUniqueInput!
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  author: UserWhereInput
  authorId: IntFilter
  characters: CharacterListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: IntFilter
  NOT: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  part: IntNullableFilter
  private: BoolFilter
  published: BoolFilter
  series: SeriesWhereInput
  seriesId: IntNullableFilter
  subTitle: StringNullableFilter
  thumbnail: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input StoryWhereUniqueInput {
  id: Int
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: Int!
  image: String
  name: String
  stories(after: StoryWhereUniqueInput, before: StoryWhereUniqueInput, first: Int, last: Int): [Story!]!
  updatedAt: DateTime!
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  stories: StoryCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutStoriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoriesInput
  create: UserCreateWithoutStoriesInput
}

input UserCreateOrConnectWithoutStoriesInput {
  create: UserCreateWithoutStoriesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutStoriesInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  stories: StoryUpdateManyWithoutAuthorInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutStoriesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStoriesInput
  create: UserCreateWithoutStoriesInput
  update: UserUpdateWithoutStoriesInput
  upsert: UserUpsertWithoutStoriesInput
}

input UserUpdateWithoutStoriesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutStoriesInput {
  create: UserCreateWithoutStoriesInput!
  update: UserUpdateWithoutStoriesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: IntFilter
  image: StringNullableFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  stories: StoryListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type VerificationRequest {
  createdAt: DateTime!
  expires: DateTime!
  id: Int!
  identifier: String!
  token: String!
  updatedAt: DateTime!
}

input VerificationRequestCreateInput {
  createdAt: DateTime
  expires: DateTime!
  identifier: String!
  token: String!
  updatedAt: DateTime
}

input VerificationRequestOrderByInput {
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input VerificationRequestUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestWhereInput {
  AND: [VerificationRequestWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: IntFilter
  identifier: StringFilter
  NOT: [VerificationRequestWhereInput!]
  OR: [VerificationRequestWhereInput!]
  token: StringFilter
  updatedAt: DateTimeFilter
}

input VerificationRequestWhereUniqueInput {
  id: Int
  token: String
}
